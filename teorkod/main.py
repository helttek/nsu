import numpy as np

a = np.array(
    [
        [0, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 0, 1, 0],
        [0, 0, 1, 1],
        [0, 1, 0, 0],
        [0, 1, 0, 1],
        [0, 1, 1, 0],
        [0, 1, 1, 1],
        [1, 0, 0, 0],
        [1, 0, 0, 1],
        [1, 0, 1, 0],
        [1, 0, 1, 1],
        [1, 1, 0, 0],
        [1, 1, 0, 1],
        [1, 1, 1, 0],
        [1, 1, 1, 1],
    ]
)
b = np.array(
    [
        [1, 1, 0, 1, 0, 0, 0],
        [1, 0, 1, 0, 1, 0, 0],
        [0, 1, 1, 0, 0, 1, 0],
        [1, 1, 1, 0, 0, 0, 1],
    ]
)

c = a @ b
print(c % 2)

c1 = np.array(
    [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 1],
        [1, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 1, 1],
        [0, 1, 0, 1, 0, 0],
        [1, 0, 0, 1, 0, 1],
        [1, 0, 0, 1, 1, 0],
        [0, 1, 0, 1, 1, 1],
        [1, 0, 1, 0, 0, 0],
        [0, 1, 1, 0, 0, 1],
        [0, 1, 1, 0, 1, 0],
        [1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 0, 1],
        [0, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1],
    ]
)

c2 = np.array(
    [
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 1],
        [1, 1, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 0, 1],
    ]
)

c_orig = np.array(
    [
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 1, 1],
        [1, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 0, 1],
        [1, 1, 0, 0, 1, 1, 0],
        [0, 0, 1, 0, 1, 1, 1],
        [1, 1, 0, 1, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 1],
        [1, 0, 1, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1, 1],
        [0, 1, 1, 1, 1, 0, 0],
        [1, 0, 0, 1, 1, 0, 1],
        [0, 0, 0, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 1],
    ]
)

c3 = np.array(
    [
        [0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 1, 0],
        [1, 0, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1],
        [0, 1, 1, 0, 0, 1],
        [1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0],
    ]
)

# c1 = np.delete(c, 1, axis=1)

# print(c1)
# -----------------------------------------------------------------------------

expr = 1 - (0.99**6 + 6 * 0.01 * (0.99**5) + 0.0001 * (0.99**4))

print(expr)

# ------------------------------------------------------------------------------

from itertools import product

# Задаём поле F_3: числа 0, 1, 2
q = 3

# Проверочная матрица H (размер 3x5)
H = np.array([[1, 0, 1, 2, 0], [2, 2, 1, 1, 0], [0, 0, 1, 1, 1]])

# Количество координат в кодовом слове
n = H.shape[1]

# Найдём все векторы длины n над F_3
all_vectors = list(product(range(q), repeat=n))

# Выберем те, которые удовлетворяют H * x^T = 0
codewords = []
for v in all_vectors:
    x = np.array(v)
    syndrome = H @ x % q
    if np.all(syndrome == 0):
        codewords.append(x)

# Печатаем результат
print(f"Найдено {len(codewords)} кодовых слов:")
for word in codewords:
    print(word)
