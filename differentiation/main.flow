import util;

differentiate(arExpr : ArExpr, var : ArVar) -> ArExpr {
    switch(arExpr) {
        ArMult(lhs, rhs) : ArSum(ArMult(differentiate(lhs, var), rhs), ArMult(lhs, differentiate(rhs, var)));
        ArSum(lhs, rhs) : ArSum(differentiate(lhs, var), differentiate(rhs, var));
        ArDiv(lhs, rhs) : ArDiv(ArSub(ArMult(differentiate(lhs, var), rhs), ArMult(lhs, differentiate(rhs, var))), ArMult(rhs, rhs));
        ArSub(lhs, rhs) : ArSub(differentiate(lhs, var), differentiate(rhs, var));
        ArNeg(val) : ArNeg(differentiate(val, var));
        ArInt(val) : ArInt(0);
        ArVar(val) : {
            if (val == var.val)
                ArInt(1)
            else
                ArInt(0)
        }
    }
}

simplifySum(lhs: ArExpr, rhs: ArExpr) -> ArExpr{
    l = simplify(lhs);
    r = simplify(rhs);
    if (l == ArInt(0))
        r
    else if (r == ArInt(0))
        l
    else if (l == r) {
        simplify(ArMult(ArInt(2), l));
    } else if (l.structname == "ArInt" && r.structname == "ArInt") {
        lInt = cast(l : ArExpr -> ArInt);
        rInt = cast(r : ArExpr -> ArInt);
        ArInt(lInt.val + rInt.val);
    }
    else if (l.structname == "ArInt" && r.structname == "ArSum") {
        Int = cast(l : ArExpr -> ArInt);
        Sum = cast(r : ArExpr -> ArSum);
        if (Sum.lhs.structname == "ArInt") {
            Int2 = cast(Sum.lhs : ArExpr -> ArInt);
            simplify(ArSum(ArInt(Int.val + Int2.val), Sum.rhs));
        } else if (Sum.rhs.structname == "ArInt") {
            Int2 = cast(Sum.rhs : ArExpr -> ArInt);
            simplify(ArSum(ArInt(Int.val + Int2.val), Sum.lhs));
        } else {
            ArSum(l, r);
        }
    } else if (l.structname == "ArInt" && r.structname == "ArInt") {
        simplify(ArSum(r, l));
    } else if (l.structname == "ArSub" && r.structname == "ArInt") {
        // println("HERE----------------------------------------------");
        Int = cast(r : ArExpr -> ArInt);
        Sub = cast(l : ArExpr -> ArSub);
        if (Sub.lhs.structname == "ArInt") {
            Int2 = cast(Sub.lhs : ArExpr -> ArInt);
            simplify(ArSub(ArInt(Int.val + Int2.val), Sub.rhs));
        } else if (Sub.rhs.structname == "ArInt") {
            Int2 = cast(Sub.rhs : ArExpr -> ArInt);
            simplify(ArSum(ArInt(Int.val - Int2.val), Sub.lhs));
        } else {
            ArSum(l, r);
        }
    } else if (l.structname == "ArInt" && r.structname == "ArSub") {
        // println("HERE--------------------------------------------------");
        simplify(ArSum(r, l));
    } else if (r.structname == "ArNeg") {
        neg = cast(r : ArExpr -> ArNeg);
        ArSub(l, neg.val);
    } else {
        ArSum(l, r);
    }
}

simplifyMult(lhs: ArExpr, rhs:ArExpr) -> ArExpr{
    l = simplify(lhs);
    r = simplify(rhs);
    if (l == ArInt(0) || r == ArInt(0)) 
        ArInt(0)
    else if (l == ArInt(1))
        r
    else if (r == ArInt(1))
        l
    else if (l.structname == "ArInt" && r.structname == "ArMult") {
        Int = cast(l : ArExpr -> ArInt);
        Mult = cast(r : ArExpr -> ArMult);
        if (Mult.lhs.structname == "ArInt") {
            Int2 = cast(Mult.lhs : ArExpr -> ArInt);
            simplify(ArMult(ArInt(Int.val * Int2.val), Mult.rhs));
        } else if (Mult.rhs.structname == "ArInt") {
            Int2 = cast(Mult.rhs : ArExpr -> ArInt);
            simplify(ArMult(ArInt(Int.val * Int2.val), Mult.lhs));
        } else {
            ArMult(l, r);
        }
    }
    else if (l.structname == "ArMult" && r.structname == "ArInt") {
        simplify(ArMult(r, l));
    } else if (l.structname == "ArInt" && r.structname == "ArInt") {
        Int1 = cast(l : ArExpr -> ArInt);
        Int2 = cast(r : ArExpr -> ArInt);
        ArInt(Int1.val * Int2.val);
    } else {
        ArMult(l, r);
    }
}

simplifyDiv(lhs: ArExpr, rhs: ArExpr) -> ArExpr{
    a = simplify(lhs);
    b = simplify(rhs);
    if (a == ArInt(0))
        ArInt(0)
    else if (a == b)
        ArInt(1)
    else if (a.structname == "ArInt" && b.structname == "ArInt") {
        Int1 = cast(a : ArExpr -> ArInt);
        Int2 = cast(b : ArExpr -> ArInt);
        ArInt(Int1.val / Int2.val);
    } else {
        ArDiv(a, b);
    }
}

simplify(arExpr : ArExpr) -> ArExpr {
    switch(arExpr) {
        ArNeg(val) : {
            if (val == ArInt(0))
                val
            else
                ArNeg(simplify(val));
        }
        ArSum(lhs, rhs) : simplifySum(lhs, rhs);
        ArMult(lhs, rhs) : simplifyMult(lhs, rhs);
        ArDiv(lhs, rhs) : simplifyDiv(lhs, rhs);
        ArSub(lhs, rhs) : simplify(ArSum(lhs, ArNeg(rhs)));
        ArInt(val) : ArInt(val);
        ArVar(val) : ArVar(val);
    }
}

main() {
    str = "(((3*(x*x)) - (4*y)) - 9)";
    println(str);
    arExpr = Parse(str);
    println(arExpr);
    arVar = ArVar("x");
    diff_arExpr = differentiate(arExpr, arVar);
    // println(diff_arExpr);
    println(arexpr2s(diff_arExpr));
    simple = simplify(diff_arExpr);
    println(arexpr2s(simple) + "\n");
    quit(0);
}

/*
Реализуйте функцию дифференцирования алгебраического выражения по заданной переменной. 
Напишите функцию упрощения, которая удаляет выражения вида 1 + 0 и x * 0.
*/